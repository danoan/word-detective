import json
import sys
import datetime
import argparse

from shutil import copytree
from jinja2 import Template


def render_template(jsonPuzzlePath, context, templateFilepath, outputFilepath):
    with open(jsonPuzzlePath) as jsonFile, open(templateFilepath) as tfile, open(outputFilepath, 'w') as fout:
        t = Template(tfile.read())
        x = t.render(jpuzzle=json.load(jsonFile),
                     cookieUniqueId=context["cookieUniqueId"],
                     expirationDate=context["expirationDate"],
                     puzzleId=context["puzzleId"])
        fout.write(x)


def render_page(fileToRender, jsonPuzzlePath, outputFolder, cookieUniqueId="sunday"):
    d = datetime.datetime.today()

    td = datetime.timedelta(days=360)
    expirationDate = (d+td).isoformat()

    context = {
        "cookieUniqueId": cookieUniqueId,
        "expirationDate": expirationDate,
        "puzzleId": d.isoformat()
    }

    render_template(jsonPuzzlePath,
                    context,
                    fileToRender,
                    "{}/{}".format(outputFolder, "index.html")
                    )


def read_input():
    parser = argparse.ArgumentParser(description="Render html game page for a given json puzzle.")
    parser.add_argument("file_to_render",
                        help="Path to html file to render.")
    parser.add_argument("json_puzzle_path", help="Path to json with the puzzle to be rendered.")
    parser.add_argument("output_folder", help="Path to location where to store the rendered page.")
    parser.add_argument("cookie_unique_id",help="String to be appended to the cookie id generated by the page to save game state.")

    return parser.parse_args()


if __name__ == "__main__":
    args = read_input()
    render_page(args.file_to_render,args.json_puzzle_path,args.output_folder,args.cookie_unique_id)
