<!DOCTYPE html>
<html>

<head>
  <meta charset='utf-8'>
  <meta http-equiv='X-UA-Compatible' content='IE=edge'>
  <title>Word Detective</title>
  <meta name='viewport' content='width=device-width, initial-scale=1'>
  <link rel='stylesheet' type='text/css' media='screen' href='/assets/css/master.css'>
  <link rel='stylesheet' type='text/css' media='screen' href='/assets/css/game-interface.css'>
  <link rel='stylesheet' type='text/css' media='screen' href='css/text-coverage.css'>
</head>

<body>
  <div id="container-loading" class="container-loading">#interface.loading#</div>
  <div id="container-notification-bar" class="container-notification-bar">
    <div id="container-request-word" class="container-request-word">
      <div id="requested-word" class="requested-word">
        Coin
      </div>
      <div class="request-word-bottom-left">
        #interface.request_word#
      </div>
    </div>
    <div id="container-request-word-success-message" class="container-request-word-success-message">
      #interface.request_word_success_message#
    </div>
  </div>
  <div class="title"><a href="/games">Word Detective</a></div>
  <div id="container-main" class="container-main">
    <div class="top-status">
      <div class="image-lens"></div>
      <span id="missing-words">#interface.missing_words#</span>
      <div id="refresh-puzzle" class="refresh-puzzle" onclick="refreshPuzzle()"></div>
      <div class="container-words">
        <div class="words-found-overflow">
          <div class="words-found">
            <ul id="words-list">
            </ul>
          </div>
        </div>
      </div>
      <div class="text-coverage">
        <span>#interface.text_coverage#</span><br>
        <div class="text-coverage-range-container">
          <div class="text-coverage-range-slider-track"></div>
          <input type="range" min="0" max="5" value="0" id="text-coverage-left-range" oninput="updateLeftRange()">
          <input type="range" min="0" max="5" value="5" id="text-coverage-right-range" oninput="updateRightRange()">
        </div>
        <ul>
          <li>0</li>
          <li>⅕</li>
          <li>⅖</li>
          <li>⅗</li>
          <li>⅘</li>
          <li style="margin-right: 0px !important;">⅟</li>
        </ul>
      </div>
    </div>

    <div class="display-text" id="display-text"></div>

    <div class="container-hexagons" id="container-hexagons">
    </div>

    <div class="container-buttons">
      <div class="button button-inline" onclick="control.erase_letter()">#interface.erase#</div>
      <div class="button button-inline" onclick="set_default_hint_style();control.hint()">#interface.hint#</div>
      <div class="button button-inline" onclick="control.check_word()">#interface.check#</div>
    </div>

    <div class="bottom-status" id="bottom-status">

    </div>

    <div id="evidence-list" class="evidence-list slide-deck">
      <div class="slide word-selection" id="slide-1">
        <h1>#interface.puzzle_words#</h1>
        <h2>#interface.puzzle_words_instructions#</h2>
        <ul id="evidence-list-words">
        </ul>
      </div>
      <div class="slide word-definition" id="slide-2">
        <h1></h1>
        <h2></h2>
        <h3><a href="#interface.dictionary_source_url">#interface.dictionary_source_label#</a></h3>
      </div>
      <div class="slide word-definition" id="slide-3">
        <h1></h1>
        <h2></h2>
        <h3><a href="#interface.dictionary_source_url">#interface.dictionary_source_label#</a></h3>
      </div>
      <div class="slide word-definition" id="slide-4">
        <h1></h1>
        <h2></h2>
        <h3><a href="#interface.dictionary_source_url">#interface.dictionary_source_label#</a></h3>
      </div>
      <div class="slide word-definition" id="slide-5">
        <div class="final-message">#interface.well_done#</div>
      </div>
      <div id="slide-next-button" class="next"><span>></span></div>
    </div>
  </div>
  <div id="evidence-list-overlay" class="container-overlay"></div>
  <script>
    let control;
    let refreshPuzzle;
    let updateLeftRange;
    let updateRightRange;
    let set_default_hint_style;
  </script>
  <script type="module">
    import { setupWordDetective } from "./js/puzzle-from-text.js"
    import { showUI } from "/assets/js/game-util.js"
    import * as textCoverage from "./js/text-coverage.js"

    set_default_hint_style = function () {
      document.getElementById("display-text").style.fontSize = "32px";
    }

    function _refreshPuzzle(resetCookie) {
      let text = `#text#`;
      let text_oneline = text.replace(/\n/g," ");

      let one_fifth = Math.floor(text.length / 5);

      let start = textCoverage.getLeftRangeValue() * one_fifth;
      let end = textCoverage.getRightRangeValue() * one_fifth;

      start = advanceUntilWhitespace(text, start);
      end = returnUntilWhitespace(text, end);

      if (textCoverage.getLeftRangeValue() == 0) {
        start = 0;
      }

      if (textCoverage.getRightRangeValue() == 5) {
        end = text.length - 1;
      }

      function advanceUntilWhitespace(text, index) {
        while (index < text.length && text[index] != ' ') index++;
        return index;
      }

      function returnUntilWhitespace(text, index) {
        while (index > 0 && text[index] != ' ' && text[index] != '\n') index--;
        return index;
      }

      setupWordDetective(resetCookie, text.substring(start, end), "#checksum#")
        .then(function (_control) {
          control = _control;

          control.add_hint_handler(function (gui) {
            let r_word = '[^\\s]*\\s'
            let r_end_of_sentence_marker = `[\\.;!?]`;
            let r_not_end_of_sentence_marker = `[^\\.;!?]`;

            function get_n_words_before(text, n, word) {
              let r = new RegExp(`(${r_word}){${n}}${word}`)

              let match = text.match(r)[0];
              return match.substring(0, match.length - word.length);
            }

            function get_n_words_after(text, n, word) {
              let r = new RegExp(`${word}(${r_word}){${n}}`)

              let match = text.match(r)[0];
              return match.substring(word.length + 1, match.length);
            }

            function get_sentence_context(text,min_words,word,before_word=true){
              // TODO: This can be improved. I am calling this function twice
              // in order to separate pre-word sentence and post-word sentences even
              // that both are captured at the same time by the regex.

              // It was done like this to avoid a bigger refactor in the code, but
              // this would be necessary sometime.
              let number_of_markers = 1;

              let context_before_word = () => {
                return `(${r_end_of_sentence_marker}${r_not_end_of_sentence_marker}*){${number_of_markers}}`;
              };

              let context_after_word = () => {
                return `(${r_not_end_of_sentence_marker}*${r_end_of_sentence_marker}){${number_of_markers}}`;
              };

              let build_context_regex = () =>{
                return new RegExp(`${context_before_word()}[\\b\\s]${word}[\\b\\s]${context_after_word()}`);
              }

              let get_matched_string = (match) => {
                let word_first_char_index = match.indexOf(word);
                if(before_word){
                  return match.substring(1, word_first_char_index);
                }else{
                  return match.substring(word_first_char_index + word.length + 1, match.length);
                }
              };

              let acceptable_match = (match) => {
                let total_words_match = get_matched_string(match).match(r_word_global);
                if(total_words_match===null || total_words_match.length < min_words){
                  return false;
                }

                return true;
              }

              let r = build_context_regex();

              let r_word_global = new RegExp(r_word,'g');
              let matches = text.match(r);

              if (matches===null){
                if(before_word){
                  return get_n_words_before(text,min_words,word);
                }else{
                  return get_n_words_after(text,min_words,word);
                }
              }

              let match = matches[0];

              while(!acceptable_match(match)){
                number_of_markers+=1;
                r = build_context_regex();
                match = text.match(r)[0];
              }

              return get_matched_string(match);

            }

            let word_chars_pos = [];
            let display_text_prefix = '';
            let display_text = '';
            let display_text_suffix = '';

            function replace_a_char(text, pos, new_char) {
              let replaced_text = text.substring(0, pos) + new_char;
              replaced_text += text.substring(pos + 1);
              return replaced_text;
            }

            function update_display() {
              document.getElementById("display-text").style.fontSize = "14px";
              gui.set_display_value(display_text_prefix, 'var(--pallete-7)');
              gui.append_display_value(display_text);
              gui.append_display_value(display_text_suffix, 'var(--pallete-7)');
            }

            function init(word) {
              display_text = '';
              display_text_prefix = get_sentence_context(text_oneline, 7, word,true) + ' ';
              display_text_suffix = " " + get_sentence_context(text_oneline, 7, word, false);

              word_chars_pos = [];
              for (let i = 0; i < word.length; ++i) {
                if (i % 2 === 0) {
                  display_text += word[i];
                } else {
                  display_text += '_';
                  word_chars_pos.push(i);
                }
              }

              update_display();
            }

            function erase_letter() {
              let char_pos_list = word_chars_pos;
              for (let i = char_pos_list.length - 1; i >= 0; --i) {
                let pos = char_pos_list[i];
                if (pos < 0) {
                  display_text = replace_a_char(display_text, -pos, '_');
                  word_chars_pos[i] = -pos;
                  break;
                }
              }
              update_display();
            }

            function click_letter(letter) {
              let char_pos_list = word_chars_pos;
              for (let i = 0; i < char_pos_list.length; ++i) {
                let pos = char_pos_list[i];
                if (pos >= 0) {
                  display_text = replace_a_char(display_text, pos, letter);
                  word_chars_pos[i] = -pos;
                  break;
                }
              }
              update_display();
            }

            function get_user_input_word() {
              return display_text;
            }

            return {
              init,
              erase_letter,
              click_letter,
              get_user_input_word
            };
          });

          showUI();
        });
    }

    updateLeftRange = textCoverage.updateLeftRange;
    updateRightRange = textCoverage.updateRightRange;
    refreshPuzzle = () => _refreshPuzzle(true);

    _refreshPuzzle(false);
    updateLeftRange();
    updateRightRange();
  </script>
</body>

</html>